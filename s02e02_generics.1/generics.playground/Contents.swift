import UIKit

//–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä.
//–ê–ª–≥–æ—Ä–∏—Ç–º—ã –º–µ—Ç–æ–¥–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã.

//1. –ò—Å–ø–æ–ª—å–∑—É—è generic —Ç–∏–ø—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö Stack.
var stack = Stack<Int>()
stack.push(1)
stack.push(2)
stack.push(3)
print(stack)
stack.pop()
print(stack)

//2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å Queue.
var queue = QueueArray<String>()
queue.enqueue("–ò–≤–∞–Ω")
queue.enqueue("–ó–ª–∞—Ç–∞")
queue.enqueue("–°–µ—Ä–∞—Ñ–∏–º")
queue
queue.dequeue()
queue
queue.peek

//3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ Linked List.

var list = LinkedList<Int>()
list.push(2)
list.push(1)
list.push(0)
print(list)

var list2 = LinkedList<Int>()
list2.push(3)
list2.push(2)
list2.push(1)
print("Before popping list: \(list2)")
let poppedValue = list2.pop()
print("After popping list: \(list2)")
print("Popped value: " + String(describing: poppedValue))

//4. –ö–∞–∫–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Å–ø–æ—Å–æ–±—ã —É–∫–∞–∑–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (constraints) –¥–ª—è generic-—Ç–∏–ø–æ–≤?
//1. –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ generic —Ç–∏–ø–∞ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å(—Ç–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∞–±–∫–ª–∞—Å—Å–æ–º)/–ø—Ä–æ—Ç–æ–∫–æ–ª (—Ç–∏–ø –¥–æ–ª–∂–µ–Ω –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å)
//2. –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ where
//    1. –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ extension —Ç–∏–ø–∞
//    2. –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è associatedtype

//5. –ü—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è generic —Å –ø–æ–º–æ—â—å—é where.

extension Stack where Element: Equatable {
    public var isEmpty: Bool {
        peek() == nil
    }
}

//6. –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª —Å Associated Type –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞?
//–Ø —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∏–∑ –∫–æ—Ä–æ–±–∫–∏ –Ω–µ–ª—å–∑—è.

//7. –ú–æ–∂–Ω–æ –ª–∏ –æ–±–æ–π—Ç–∏ —ç—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ?
// –õ–∏–±–æ –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–∞ generic —Ç–∏–ø –∏ —É–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞, –ª–∏–±–æ type erasure.

//8. –ò–∑—É—á–∏—Ç—å –ø–æ–¥—Ö–æ–¥ https://medium.com/@chris_dus/type-erasure-in-swift-84480c807534
//9. –ü—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

struct üå© {}
struct üî• {}

protocol Pokemon {
    associatedtype Power
    
    func attack() -> Power
}
 
struct Pikachu: Pokemon {
    
    func attack() -> üå© {
        return üå©()
    }
}
 
struct Charmander: Pokemon {
    
    func attack() -> üî• {
        return üî•()
    }
}

struct AnyPokemon<P: Pokemon>: Pokemon {
    
    private let pokemon: P
    
    init(_ pokemon: P) {
        self.pokemon = pokemon
    }
    
    func attack() -> P.Power {
        return pokemon.attack()
    }
}
 
// Usage
let pokemon = AnyPokemon(Charmander())
pokemon.attack()

//–ë—É–¥–µ—Ç –∑–¥–æ—Ä–æ–≤–æ, –µ—Å–ª–∏ –ø–æ–ø—Ä–æ–±—É–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤ swift standard library –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞.
//–ö–ª–∞—Å—Å—ã AnySequence, AnyGenerator, AnyHashable, AnyIterator, AnyCollection; –∫–ª–∞—Å—Å—ã –≤ Combine: AnyCancellable, AnyPublisher

//10. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π infix, prefix, postfix –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã.
//–£–∫–∞–∑–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å.

precedencegroup BiCurrencyInfixPrecedence {
    lowerThan: MultiplicationPrecedence
    higherThan: AdditionPrecedence
    associativity: left
    assignment: false
}

infix operator ++: BiCurrencyInfixPrecedence
prefix operator *
postfix operator ^

struct BiCurrencyBasket {
    var dollars: Float = 0
    var euros: Float = 0
    
    static func + (left: BiCurrencyBasket, right: BiCurrencyBasket) -> BiCurrencyBasket {
        return BiCurrencyBasket(dollars: left.dollars + right.dollars,
                                euros: left.euros + right.euros)
    }
    
    static prefix func * (basket: BiCurrencyBasket) -> BiCurrencyBasket {
        return BiCurrencyBasket(dollars: basket.dollars * 2, euros: basket.euros * 2)
    }
    
    static postfix func ^ (basket: BiCurrencyBasket) -> BiCurrencyBasket {
        return BiCurrencyBasket(dollars: basket.euros, euros: basket.dollars)
    }
    
    static func ++ (left: BiCurrencyBasket, right: BiCurrencyBasket) -> BiCurrencyBasket {
        return BiCurrencyBasket(dollars: (left.dollars + right.dollars) * 2, euros:  (left.euros + right.euros) * 2)
    }
}

let final = *(BiCurrencyBasket(dollars: 10, euros: 20) ++ BiCurrencyBasket(dollars: 10, euros: 10) + BiCurrencyBasket(dollars: 5, euros: 5))^
print(final)
